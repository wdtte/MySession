package com.colin.mysession;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Wdttee
 * @description This is description of class
 * @datetime 10:35 2022/11/8 2022
 */
public class MySession {
    //data storage
    private Map<String, Object> map;
    //JSessionId
    private String id;
    //sessionFactory
    //the String here used to put id
    private static Map<String, MySession> sessionFactory = new HashMap<>();

    /**
     * constructor with parameters
     *
     * @param map
     * @param id
     */
    public MySession(Map<String, Object> map, String id) {
        this.map = map;
        this.id = id;
    }

    //getSession()
    public static MySession getSession(HttpServletRequest req, HttpServletResponse resp) {
        MySession mySession = null;
        Cookie[] cookies = req.getCookies();
        //avoid the unnecessary loop
        boolean flag = false;
        //store the value of cookie
        String colinValue = null;
        //Avoid NullPointerException
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals("colin")) {
                    flag = true;
                    colinValue = cookie.getValue();
                }
            }
            if (!flag) {
                /*
                If did not find the cookie named "colin",
                we should create a new cookie named "colin" and its value is generated by Math.random,
                write it to resp;
                then creat a new session(MySession) which has a new map and its id(JSessionId,cookie value) is same to the cookie above.
                For the next step we put this new created session into sessionFactory and return this session at last.
                 */
                Cookie cookie = new Cookie("colin", Math.random() + "");
                resp.addCookie(cookie);
                MySession mySessionTemp = new MySession(new HashMap<>(), cookie.getValue());
                sessionFactory.put(mySessionTemp.id, mySessionTemp);
                mySession = mySessionTemp;
            } else {
                /*
                If the cookie named "colin" was found,
                we should traverse the sessionFactory to find a session whose id equals to the value(colinValue) of this cookie
                then return it.
                 */
                for (Map.Entry<String, MySession> mySessionStringEntry : sessionFactory.entrySet()) {
                    if (colinValue.equals(mySessionStringEntry.getKey())) {
                        mySession = sessionFactory.get(colinValue);
                    }
                }
            }
        }
        return mySession;
    }

    //IdGetter
    public String getId() {
        return id;
    }

    public Object getAttribute(String key) {
        return map.get(key);
    }

    public void setAttribute(String key, Object value) {
        this.map.put(key, value);
    }

    public void removeAttribute(String key) {
        this.map.remove(key);
    }
}
